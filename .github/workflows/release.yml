name: Build and Publish Python Package

on:
  push:
    tags:
      - 'v*.*'       # Run for vX.Y or vX.Y.Z tags
    branches:
      - main         # Run for main branch (will create pre-releases)
  pull_request:
    branches:
      - main         # Run tests on PRs to main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required to get all tags for versioning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest build
          pip install -e .

      - name: Run tests
        run: pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for release creation
      id-token: write  # Needed for PyPI publishing

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required to get all tags for versioning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install -e .

      - name: Set build metadata with lib-version
        id: build_meta
        run: |
          # Get metadata and set as environment variables
          lib-version version metadata >> $GITHUB_ENV
          
          # Also display for logging
          echo "Build metadata from lib-version:"
          lib-version version metadata

      - name: Build package
        run: |
          # For tagged builds (vX.Y or vX.Y.Z), the builder will handle version creation
          # For main branch builds, it will create a dev version
          lib-version build
          # List the built packages
          ls -la dist/

      - name: Get package version
        id: get_version
        run: |
          VERSION=$(lib-version version current)
          echo "package_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      # For tagged releases
      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ steps.get_version.outputs.package_version }}
          name: Release ${{ steps.get_version.outputs.package_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Calculate pre-release version
        id: pre_version
        run: |
          NEXT_VERSION=$(lib-version version next)
          TIMESTAMP_CLEAN=$(echo "${timestamp}" | tr -d ' ' | tr ':' '-')
          PRE_VERSION="${NEXT_VERSION}-pre-${TIMESTAMP_CLEAN}"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "pre_version=$PRE_VERSION" >> $GITHUB_OUTPUT
          echo "Pre-release version: $PRE_VERSION"


      # Clean dist directory
      - name: Clean dist directory
        run: |
          rm -rf dist/*
          echo "Cleaned dist directory"

      # Build package for pre-release
      - name: Build package for pre-release
        run: |
          lib-version build --dev
          # List the built packages
          ls -la dist/

      # Create pre-release for all builds
      - name: Create Pre-release
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          prerelease: true
          tag_name: v${{ steps.pre_version.outputs.pre_version }}
          name: Pre-release ${{ steps.pre_version.outputs.next_version }}