name: Build and Publish Python Package

on:
  push:
    tags:
      - 'v*.*.*'  # Run for semantic version tags
    branches:
      - main      # Run for main branch (will create pre-releases)
  pull_request:
    branches:
      - main      # Run tests on PRs to main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required to get all tags for versioning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest build
          pip install -e .

      - name: Run tests
        run: pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for release creation
      id-token: write  # Needed for PyPI publishing

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required to get all tags for versioning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install -e .

      - name: Build package
        run: |
          # Use our lib-version CLI to build the package with auto-versioning
          lib-version --package-dir .
          # List the built packages
          ls -la dist/

      - name: Get package version
        id: get_version
        run: |
          VERSION=$(lib-version --info | grep "Package version" | cut -d' ' -f3)
          echo "package_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      # For tagged releases (official releases)
      - name: Get bumped version
        id: get_bumped_version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Use our utility to get the bumped version
          BUMPED_VERSION=$(lib-version --get-bumped-version)
          echo "bumped_version=$BUMPED_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version: $BUMPED_VERSION"

      - name: Create new tag for bumped version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          git tag v${{ steps.get_bumped_version.outputs.bumped_version }}
          git push origin v${{ steps.get_bumped_version.outputs.bumped_version }}

      - name: Upload to GitHub Release with bumped version
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ steps.get_bumped_version.outputs.bumped_version }}
          name: Release ${{ steps.get_bumped_version.outputs.bumped_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # For non-tagged pushes to main (pre-releases)
      - name: Create Pre-release
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          prerelease: true
          tag_name: v${{ steps.get_version.outputs.package_version }}
          name: Pre-release ${{ steps.get_version.outputs.package_version }}